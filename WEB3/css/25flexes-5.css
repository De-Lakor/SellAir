body{
	margin:0px;
	padding:0px;
	display:flex;
	justify-content: center;
	background-color:rgb(31, 31, 31);
}
   /* display:flex;*/

		/*Flex - позволяет распологать элементы лежащие внутри блока при помощи технологии FLEX. Свойство display с значением flex применяется
		именно к родителю тех элементов, которые мы планируем размещать на странице при помощи FLEX*/

	/*flex-direction:column;*/

		/*
		Имя свойства: flex-direction
		Описание: Позволяет определить направления расположения элементов внутри блока с свойством display:flex;
		Возможные значения:
		- row
		- column
		- row-reverse
		- column-reverse
		*/

	/*justify-content:center;*/

		/*
		Имя свойства:justify-content
		Описание: Свойство позволяет определить выравнивание flex элементов внутри блока по ширине родительского блока. Возможно одновременное использование с свойством align-items которое позволяет выравнивать элементы по высоте род.блока.
		Возмозные значения:
		- flex-start (Если flex-diriction указан как row, то элементы находятся в левой части блока, если flex-diriction указан как column то элементы находятся в верхней части блока)
		- flex-end (сли flex-diriction указан как row, то элементы находятся в правой части блока, если flex-diriction указан как column то элементы находятся в нижней части блока)
		- center (Если flex-direction указан как row, то элементы отправляются в центр блока горизонтали, если flex-direction указан как column тогда элементы устремляются в центр по вертикали)
		- space-berween (Элементы устанавливаютя на равном удалении друг от друга без свободного пространства между первым и последним flex элементов по отношению к границам родительского блока)
		- space-around (Элементы устанавливаются на равном удалении друг от друга с наличием свободного пространства между границей родительского блока и первым а так же последним flex элементов)
		*/

	/*align-items:stertch;*/

		/*
		Имя свойства: align-items
		Описание свойства: Свойство позволяет определить выравнивание flex элементов внутри блока по высоте родительского блока. Возможно одновременное использование с свойством justify-content которое позволяет выравнивать элементы по ширине род.блока.
		Возможные значения:
		- flex-start (Элементы располагаются в верхне чсти род. блока)
		- flex-end (Элементы располагаются в нижней части род.блока)
		- center (Элементы устремляют в центр род.блока по высоте)
		- stretch (Если элементы не имеют фиксирвонной ширины, они стремятся занять всю доступшную высоту род.блока)
		*/

		/*align-self:;*/

			/*
			Имя свойства: align-self
			Описание свойства: Позволяет определить положение одного элемента располагающегося внутри блока с использованием Flex. Применяется непосредственно к самому тегу
			Который должен располагаться удобным нам образом по отношению к родителю.
			Возможные значения:
			- flex-start (Элементы располагаются в верхне чсти род. блока)
			- flex-end (Элементы располагаются в нижней части род.блока)
			- center (Элементы устремляют в центр род.блока по высоте)
			- stretch (Если элементы не имеют фиксирвонной ширины, они стремятся занять всю доступшную высоту род.блока)
			*/

		/*flex-basis*/
			/*
			Имя свойства: flex-basis
			Описание свойства: Позволяет задать изначальный размер flex-элементов до изменения размеров при помощи других свойств flex до изменения
			размера при помощи друних свойтсв flex для работы с размерами. Важно понимать что свойтсво flex-basis задает размер по основной оси flex-элементов.
			Проще говоря, если у родителя всех flex элементов задано значение row для flex-direction, flex-basis будет задавать им именно ширину а если column
			то свойство будет задавть изначальную высоту элементам
			Возможные значения:
			- px
			- %
			*/
			/*
			Имя свойства: flex-grow
			Описание: Позвооляет определить занимаемую элементом долю пространства в материнском блоке. По умолчанию всем
			flex-элементам передается данное свойсвто с значением 1. мы можем передать данное свойство одному или нескольким элементам
			в зависимости от наших на то потребностей. Чем больше указанное нами значение свойства, тем больше места элемент будет занимать относительно
			остальных элементов
			возможные значения:
			- число
			*/
			/*
			Имя свойства: flex-shrink
			Описание: Свойство, противоположное flex-grow. Данное свойство указывает насколько мало пространства элемент может занять, если
			его материнский блок меньше базового размера
			возможные значения:
			- число
			*/
			/*
			Имя свойства: flex
			Описание: принимает три значения через пробел. Поозволяет задать сразу три значения -это flex-grow flex-shrink и flex-basis именно
			в этом порядке для записи значений
			Возможные значения:
			*/
			/*
			Имя свойства: flex-wrap
			Описание: Позволяет задать модель поведения в случае если размер дочерних элементов больше родительского блока
			Возможные значения:
			 - no-wrap [элементы сжимаются так, чтобы каждый элемент вместился в однустроку]
			 - wrap [Элементы имеют фиксированный размер, в случае если у родительского блока становится тесно, то элементы перемещаются
			 на следующую строку]
			*/
			/*
			Имя свойства: align-content
			Описание: Применяется для определения основного напраавления и расположения flex-элементов внутри родительского элемента.
			В основном используестся вместе с flex-wrap
			Возможные значения:
			 -
			*/
#wrapper{
	/* outline:1px solid red; */
	width:1900px;
	height:1500px;
	display:flex;
	justify-content:center;
}
#flex{
	/* outline:1px solid red; */
	height:1500px;
	width:50%;
	margin-top:30px;
	display:flex;
	justify-content:center;
}
/* #column{
	width:2%;
	height:400px;
} */
#float{
	/* outline:1px solid red; */
    height:1500px;
    width:50%;
	margin-top:30px;
	margin-right:40px;
	display:flex;
	justify-content:center;
}
.block{
	background-color:rgb(88, 88, 88);
	height:100%;
	width:94%;
}
.title{
	height:60px;
	background-color:rgb(23, 23, 23);
	color:rgb(235, 232, 231);
	text-align:center;
	font-size:30px;
	line-height:60px;
	padding-left:30px;
	padding-right:30px;
}
.imgContent{
	/* outline:1px solid red; */
	padding:10px;
	height:760px;
	display:flex;
	flex-direction:column;
}
.column{
	margin-bottom:30px;
	height:350px;
	display:flex;
}
.item{
	margin:10px;
	flex-basis:calc(100% / 3);
	height:100%;
	background-color:rgb(191, 190, 190);
}
.img{
	margin:10px;
	background-color:white;
	height:calc(100% - 50%);
	overflow:hidden;
}
.info{
	height:calc(45% - 40px);
	background-color:rgb(150, 150, 150);
	padding:20px;
	width:calc(100% - 40px);
}
.imgOne{
	background-image: url(https://cdn-kaspi.kz/medias/sys_master/images/images/h84/hee/26963456950302/asus-tuf-gaming-f15-fx506li-hn012-90nr03t2-m01550-cernyj-100705458-1.png);
	background-repeat:no-repeat;
	background-position:center;
}
.codeBlock{
	background-color:rgb(172, 172, 172);
	font-size:22px;
}



.floatCont{
	padding:10px;
	height:760px;

}
.itemFloat{
	/* outline:1px solid red; */
	margin:10px;
	height:calc(100% / 2);
	width:30%;
	float:left;
	background-color:rgb(191, 190, 190);
}
.imgTwo{
	margin:10px;
	background-color:white;
	height:calc(100% - 50%);
	overflow:hidden;
	background-image: url(https://cdn-kaspi.kz/medias/sys_master/images/images/h84/hee/26963456950302/asus-tuf-gaming-f15-fx506li-hn012-90nr03t2-m01550-cernyj-100705458-1.png);
	background-repeat:no-repeat;
	background-position:center;
}
.infoFL{
	height:calc(45% - 40px);
	background-color:rgb(150, 150, 150);
	padding:20px;
	width:calc(100% - 40px);
}

.flCode{
	margin-top:50px;
}
