 <?php 

 /*
   Шаблон

   название конструкции:
   параметры кострукции:

 */




 /*
 Конструкции в php

 название конструкции:Echo
 параметры кострукции:выводит данные на экран

 название конструкции:print
 параметры кострукции: выводит данные на экран(аналогично echo за тсключением пересчисления)
 */




 /*
     Переменные в php

     Переменная - это ячейка памяти, зарезервированная под зранение какиз либо данных

     Важно знать о переменных в  php

     1 объявление переменной в php  начинается со знака $
     2 Имя переменной должно начинаться с буквы или символа подчеркивания
     3 последующие символы могут быть буквами, цифрами или символами подчеркивания в любом количестве
     4 Имя переменной чуствительно к регистру

     переменные могут зранить  в себе различные типы данных


 */




 /*
 Операторы в php

 операторы в програмировании позволяют выполнять различные операции над данными

 простейшими операторами могут быть следующие операции:
 1 = - присваивание
 2 + - сложение
 3 - - вычитание
 4 , - перечисление
 5 ! - отрицания
 и тому подобные

 Операторы делятся на несколько особых типов:
  - унарные(работают с одним операндом)
  - бинарные(работают с двумя операндами)
  - тернарные(работает с тремя операндами)

  пример унарного операнда:
  код: !true;(!$a)

  пример бинарного операнда:
  код: 2 + 2


 Важно знать что операнды как и функции возвращают результатсвоей работы

 */





 /*
 Типы комментариев в php

 // - однострочный комментарий
 # - однострочный комментарий в стиле UNIX
 /*

 много строчный комментарий

 */





 /*
 #error.php

 #Константы в php
 Главное отличие константы от переменной - возможность записи информации только единожды.
  Как правило константы записываются в ВЕРХНЕМ РЕГИСТРЕ

 константа принимает два параметра, первый параметр - наименование константы, второй параметр - значение константы
 константа("ИМЯ_КОНСТАНТЫ","Значение константы")
 define - функция константы(она и есть константа)
 */
 define("NAME","Josh")




 /*
 Ошибки в php

Для управления выводом информации об ошибках в коде в php предусмотрена функция eror_reporting()
, благодаря которой появляется возмодность управления уровнем ошибок

иначе говоря мы можем обратится к php и указать что мы не хотим видеть вывод предупреждения об ошибках низкого уровня

уровни ошибок

eror_reporting(0) - полностью отключает все уровни ошибок кроме E_PRASE
eror_reporting(E_ALL) - включает все уровни ошибок
eror_reporting(E_NOTICE) - отображает только ошибки уровня легкого предупреждения

 */





/*
# Манипуляции с переменными



В PHP как и в другом языке прогрммирования, присутствует возможность выполнять различные манипуляции с переменными.

*/

# Копирование значения переменной
/*$a = 10;

$b = $a;

echo $b;


# Переменная ссылка

$c = 12;

$i = &$c;

$i = 321;

echo "<br/>".$c;


# Название переменной из значения друго переменной

$name = 'josh';

$$name = 'drake';

echo $josh;





# Определение типа значения в переменной
// error_reporting(E_ALL);

/*
Функция gettype() принимает один аргумент и возвращает строку с именем того типа, которому пренадлежит значение указанной в аргументе переменной.




$value = 123;

// 1 (integer, int), 1.1(float, double), "asd" (string), array(), object, resource, bool boolean(true|false), null


// $a = gettype($value);



# Функции точного определения типа

/*boolean true or false*/

// is_int();
// is_integer();
// is_string();
// is_bool();
// is_float();
// is_double();
// is_array();
// is_object();
// is_resource();
// is_null();


# Изменение типа переменной

/*Изменение типа при помощи функции settype()

echo gettype($value);

settype($value, string);

echo "<br/>".gettype($value);

echo "<br/>".$value;


/*Изменение типа при помощи приведения типа

$k = '123asd';

$j = (integer) $k;

echo $j;

/*
1) Создайте как можно больше переменных с со всеми известными Вам типами данными, при помощи функции gettype() выведите на экран название всех типов всех созданных Вами переменных.

2) Создайте переменную с строчным значением и переменную с числом.

3) У созданных ранее переменных измените тип на любой другой, желательно с сохранением значения.
*/















  ?>
